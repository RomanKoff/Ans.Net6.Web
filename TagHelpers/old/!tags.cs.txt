using Microsoft.AspNetCore.Razor.TagHelpers;

namespace Ans.Net6.Web.TagHelpers
{

	//public class AnsDebugNodesTagHelper
	//    : TagHelper
	//{
	//    private readonly IMapNodesProvider _mapNodes;
	//    private readonly ICurrentContext _currentContext;
	//    public AnsDebugNodesTagHelper(
	//        IMapNodesProvider mapNodes,
	//        ICurrentContext currentContext)
	//    {
	//        this._mapNodes = mapNodes;
	//        this._currentContext = currentContext;
	//    }
	//    public override void Process(
	//        TagHelperContext context,
	//        TagHelperOutput output)
	//    {
	//        if (_mapNodes != null)
	//        {
	//            output.TagMode = TagMode.StartTagAndEndTag;
	//            output.TagName = "div";
	//            output.Content.AppendHtml($"<p>Node: <code>{_currentContext.NodeName}</code></p>");
	//            output.Content.AppendHtml("<ul>");
	//            _outNodes(output, _mapNodes.Root);
	//            output.Content.AppendHtml("</ul>");
	//        }
	//    }
	//    private void _outNodes(
	//        TagHelperOutput output,
	//        MapNodeItem item)
	//    {
	//        output.Content.AppendHtml("<li>");
	//        output.Content.AppendHtml($"<code>[{item.Id}^{item.MasterPtr}]</code> ");
	//        output.Content.AppendHtml($"<a href=\"{_currentContext.BaseUrl}/{item.Name}\">{item.Name} - {item.Title}</a>");
	//        output.Content.AppendHtml($" <code>({item.CountMasters}:{item.CountSlaves})</code>");
	//        if (item.Slaves != null && item.Slaves.Any())
	//        {
	//            output.Content.AppendHtml("<ul>");
	//            foreach (var item1 in item.Slaves)
	//                _outNodes(output, item1);
	//            output.Content.AppendHtml("</ul>");
	//        }
	//        output.Content.AppendHtml("</li>");
	//    }
	//}



	//public class AnsDebugNavigationTagHelper
	//    : TagHelper
	//{
	//    private readonly ICurrentContext _currentContext;
	//    public AnsDebugNavigationTagHelper(
	//        ICurrentContext currentContext)
	//    {
	//        this._currentContext = currentContext;
	//    }
	//    public override void Process(
	//        TagHelperContext context,
	//        TagHelperOutput output)
	//    {
	//        if (_currentContext.Node.Navigator != null)
	//        {
	//            output.TagMode = TagMode.StartTagAndEndTag;
	//            output.TagName = "div";
	//            output.Content.AppendHtml($"<p>Node path: <code>{_currentContext.NodePath}</code></p>");
	//            output.Content.AppendHtml("<ul>");
	//            _outBranch(output, _currentContext.Node.Navigator);
	//            output.Content.AppendHtml("</ul>");
	//        }
	//    }
	//    private void _outBranch(
	//        TagHelperOutput output,
	//        NavigatorBranch branch)
	//    {
	//        if (branch != null && branch.Any())
	//        {
	//            output.Content.AppendHtml("<ul>");
	//            foreach (var item1 in branch)
	//            {
	//                output.Content.AppendHtml("<li>");
	//                output.Content.AppendHtml(item1.Href);
	//                if (item1.IsSubActive)
	//                    output.Content.AppendHtml("<b>.S</b>");
	//                if (item1.IsActive)
	//                    output.Content.AppendHtml("<b>.A</b>");
	//                if (item1.IsHidden)
	//                    output.Content.AppendHtml("<b>.H</b>");
	//                output.Content.AppendHtml(" - ");
	//                output.Content.AppendHtml(item1.GetTag());
	//                output.Content.AppendHtml("</li>");
	//                _outBranch(output, item1);
	//            }
	//            output.Content.AppendHtml("</ul>");
	//        }
	//    }
	//}



	///// <summary>
	///// Название страницы
	///// </summary>
	//public class AnsPageTitleTagHelper
	//	: TagHelper
	//{
	//	private readonly ICurrentContext _currentContext;
	//	[ViewContext]
	//	public ViewContext ViewContext { get; set; }
	//	public AnsPageTitleTagHelper(
	//		ICurrentContext currentContext)
	//	{
	//		this._currentContext = currentContext;
	//	}
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		_pageTitleFromViewData();
	//		output.TagMode = TagMode.StartTagAndEndTag;
	//		output.TagName = "h1";
	//		output.Content.AppendHtml(_currentContext.Page.Title);
	//	}
	//	private void _pageTitleFromViewData()
	//	{
	//		if (_currentContext.Page.Title == null
	//			&& ViewContext.ViewData["Title"] != null)
	//			_currentContext.Page.Title = ViewContext.ViewData["Title"].ToString();
	//	}
	//}



	//[HtmlTargetElement("p")]
	//public class AutoLinkerHttpTagHelper
	//	: TagHelper
	//{
	//	public override async Task ProcessAsync(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		var childContent = output.Content.IsModified
	//			? output.Content.GetContent()
	//			: (await output.GetChildContentAsync()).GetContent();
	//		output.Content.SetHtmlContent(Regex.Replace(
	//			 childContent,
	//			 @"\b(?:https?://)(\S+)\b",
	//			 "<a target=\"_blank\" href=\"$0\">$0</a>"));
	//	}
	//}



	//public class AnsNavLinkTagHelper
	//	: TagHelper
	//{
	//	public NavigationItem Item { get; set; }
	//	public string Class { get; set; }
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		output.TagMode = TagMode.StartTagAndEndTag;
	//		output.TagName = null;
	//		var tag1 = new TagAHelper
	//		{
	//			CssClass = Class,
	//			Href = Item.Href,
	//			InnerHtml = Item.InnerHtml,
	//			IsActive = Item.IsActive,
	//			IsExternal = Item.IsBlank
	//		};
	//		output.Content.AppendHtml(tag1.GetTag());
	//	}
	//}



	//public class AnsBreadcrumbTagHelper
	//	: TagHelper
	//{
	//	private readonly ICurrentContext _current;
	//	public List<NavigationItem> Items { get; set; }
	//	public AnsBreadcrumbTagHelper(
	//		ICurrentContext current)
	//	{
	//		this._current = current;
	//	}
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		/*
	//		<nav aria-label="breadcrumb">
	//		 <ol class="breadcrumb">
	//			 <li class="breadcrumb-item"><a href="#">Home</a></li>
	//			 <li class="breadcrumb-item"><a href="#">Library</a></li>
	//			 <li class="breadcrumb-item active" aria-current="page">Data</li>
	//		 </ol>
	//		</nav>
	//		*/
	//		var data = Items ?? _current.GetBreadcrumb();
	//		if (data != null && data.Any())
	//		{
	//			output.TagMode = TagMode.StartTagAndEndTag;
	//			output.TagName = "nav";
	//			output.Attributes.Add("aria-label", "breadcrumb");
	//			output.Content.AppendHtml("\n<ol class=\"breadcrumb\">");
	//			foreach (var item1 in data.Take(data.Count - 1))
	//				if (item1.IsDisabled)
	//				{
	//					output.Content.AppendHtml("\n<li class=\"breadcrumb-item disabled\">");
	//					output.Content.AppendHtml(item1.InnerHtml);
	//					output.Content.AppendHtml("</li>");
	//				}
	//				else
	//				{
	//					output.Content.AppendHtml("\n<li class=\"breadcrumb-item\">");
	//					output.Content.AppendHtml($"<a href=\"{item1.Href}\">{item1.InnerHtml}</a>");
	//					output.Content.AppendHtml("</li>");
	//				}
	//			var item2 = data.Last();
	//			output.Content.AppendHtml("\n<li class=\"breadcrumb-item active\" aria-current=\"page\">");
	//			output.Content.AppendHtml(item2.InnerHtml);
	//			output.Content.AppendHtml("</li>");
	//			output.Content.AppendHtml("\n</ol>");
	//		}
	//	}
	//}



	//public class AnsNavItemTagHelper
	//	: TagHelper
	//{
	//	public string ClassLi { get; set; }
	//	public string ClassA { get; set; }
	//	public string Href { get; set; }
	//	public bool External { get; set; }
	//	public bool Active { get; set; }
	//	public bool Disabled { get; set; }
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		output.TagMode = TagMode.StartTagAndEndTag;
	//		output.TagName = null;
	//		var a1 = new TagAHelper
	//		{
	//			CssClass = (ClassA == "") ? null : ClassA ?? "nav-link",
	//			Href = Href,
	//			InnerHtml = output.GetChildContentAsync().Result.GetContent(),
	//			IsExternal = External,
	//			IsActive = Active,
	//			IsDisabled = Disabled
	//		};
	//		var li1 = new TagLiHelper
	//		{
	//			CssClass = (ClassLi == "") ? null : ClassLi ?? "nav-item",
	//			InnerHtml = a1.GetTag().GetString()
	//		};
	//		output.Content.AppendHtml(li1.GetTag());
	//	}
	//}




	///// <summary>
	///// Элементы навигации
	///// </summary>
	//public class AnsNavbarItemsTagHelper
	//	: TagHelper
	//{
	//	private readonly ICurrentContext _currentContext;
	//	public string Id { get; set; }
	//	public NavigatorBranch Data { get; set; }
	//	public AnsNavbarItemsTagHelper(
	//		ICurrentContext currentContext)
	//	{
	//		this._currentContext = currentContext;
	//	}
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		if (Data != null && Data.Any())
	//		{
	//			var id = Id ?? $"ddl_{context.UniqueId}";
	//			output.TagMode = TagMode.StartTagAndEndTag;
	//			output.TagName = null;
	//			int i1 = 0;
	//			foreach (var item1 in Data.Where(x => !x.IsHidden))
	//			{
	//				var li1 = new TagBuilder("li");
	//				li1.AddCssClass("nav-item");
	//				var link1 = item1.GetTag();
	//				link1.AddCssClass("nav-link");
	//				if (item1.IsSubActive)
	//					link1.AddCssClass("active");
	//				if (item1.Any())
	//				{
	//					var id2 = $"{id}_{++i1}";
	//					li1.AddCssClass("dropdown");
	//					link1.AddCssClass("dropdown-toggle");
	//					link1.MergeAttribute("id", id2);
	//					link1.MergeAttribute("role", "button");
	//					link1.MergeAttribute("data-bs-toggle", "dropdown");
	//					link1.MergeAttribute("aria-expanded", "false");
	//					li1.InnerHtml.AppendHtml(link1);
	//					var ul1 = new TagBuilder("ul");
	//					ul1.AddCssClass("dropdown-menu");
	//					ul1.MergeAttribute("aria-labelledby", id2);
	//					foreach (var item2 in item1.Where(x => !x.IsHidden))
	//					{
	//						var li2 = new TagBuilder("li");
	//						var link2 = item2.GetTag();
	//						link2.AddCssClass("dropdown-item");
	//						li2.InnerHtml.AppendHtml(link2);
	//						ul1.InnerHtml.AppendHtml(li2);
	//					}
	//					li1.InnerHtml.AppendHtml(ul1);
	//				}
	//				else
	//				{
	//					li1.InnerHtml.AppendHtml(link1);
	//				}
	//				output.Content.AppendHtml(li1);
	//			}
	//		}
	//	}
	//}



	///// <summary>
	///// Навигатор
	///// </summary>
	//public class AnsNavigatorTagHelper
	//	: TagHelper
	//{
	//	private readonly ICurrentContext _currentContext;
	//	public string Id { get; set; }
	//	public NavigatorBranch Data { get; set; }
	//	public AnsNavigatorTagHelper(
	//		ICurrentContext currentContext)
	//	{
	//		this._currentContext = currentContext;
	//	}
	//	public override void Process(
	//		TagHelperContext context,
	//		TagHelperOutput output)
	//	{
	//		var data = Data ?? _currentContext.Node.Navigator;
	//		if (data != null && data.Any())
	//		{
	//			var id = Id ?? $"ddl_{context.UniqueId}";
	//			output.TagMode = TagMode.StartTagAndEndTag;
	//			output.TagName = "ul";
	//			output.Attributes.Add("class", "navigator");
	//			int i1 = 0;
	//			foreach (var item1 in data.Where(x => !x.IsHidden))
	//			{
	//				if (item1.Any())
	//				{
	//					var id2 = $"{id}_{++i1}";
	//					output.Content.AppendHtml("\n<li class=\"dropdown\">");
	//					var link1 = item1.GetTag();
	//					link1.AddCssClass("dropdown-toggle");
	//					link1.MergeAttribute("id", id2);
	//					link1.MergeAttribute("role", "button");
	//					link1.MergeAttribute("data-bs-toggle", "dropdown");
	//					link1.MergeAttribute("aria-expanded", "false");
	//					output.Content.AppendHtml(link1);
	//					output.Content.AppendHtml($"\n\t<ul class=\"dropdown-menu\" aria-labelledby=\"{id2}\">");
	//					foreach (var item2 in item1.Where(x => !x.IsHidden))
	//					{
	//						output.Content.AppendHtml("\n\t\t<li>");
	//						var link2 = item2.GetTag();
	//						link2.AddCssClass("dropdown-item");
	//						output.Content.AppendHtml(link2);
	//						output.Content.AppendHtml("</li>");
	//					}
	//					output.Content.AppendHtml("\n\t</ul>");
	//				}
	//				else
	//				{
	//					output.Content.AppendHtml("\n<li>");
	//					output.Content.AppendHtml(item1.GetTag());
	//				}
	//				output.Content.AppendHtml("\n</li>");
	//			}
	//		}
	//	}
	//}

}
